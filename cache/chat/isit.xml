<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2017.1 (Build 792U)" ts="2017-11-22 19:37:34">
<Class name="Data.Conversation">
<Description>
Диалог</Description>
<Super>%Persistent,%Populate</Super>
<TimeChanged>64603,49264.897647</TimeChanged>
<TimeCreated>64554,36980.637498</TimeCreated>

<Property name="Title">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="CreatedAt">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Data.ConversationD</DataLocation>
<DefaultData>ConversationDefaultData</DefaultData>
<IdLocation>^Data.ConversationD</IdLocation>
<IndexLocation>^Data.ConversationI</IndexLocation>
<StreamLocation>^Data.ConversationS</StreamLocation>
<ExtentSize>4</ExtentSize>
<Data name="ConversationDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ConversationID</Value>
</Value>
<Value name="3">
<Value>Title</Value>
</Value>
<Value name="4">
<Value>CreatedAt</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="ConversationID">
<Selectivity>1</Selectivity>
<AverageFieldSize>8</AverageFieldSize>
</Property>
<Property name="CreatedAt">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>19</AverageFieldSize>
</Property>
<Property name="Title">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>17.25</AverageFieldSize>
</Property>
<SQLMap name="ConversationIDIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="Data.Message">
<Description>
Сообщение</Description>
<Super>%Persistent,%Populate</Super>
<TimeChanged>64594,54827.813469</TimeChanged>
<TimeCreated>64554,36013.423603</TimeCreated>

<Property name="Information">
<Type>%Text</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="HumanfaceID">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="Important">
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<Property name="Conversation">
<Type>Data.Conversation</Type>
</Property>

<Index name="ConversationIndex">
<Properties>Conversation</Properties>
</Index>

<Property name="ReplyTo">
<Type>Data.Message</Type>
</Property>

<Property name="CreatedAt">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="Attachment">
<Type>%String</Type>
</Property>

<Property name="CountOfAttachments">
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Data.MessageD</DataLocation>
<DefaultData>MessageDefaultData</DefaultData>
<IdLocation>^Data.MessageD</IdLocation>
<IndexLocation>^Data.MessageI</IndexLocation>
<StreamLocation>^Data.MessageS</StreamLocation>
<ExtentSize>50</ExtentSize>
<Data name="MessageDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>MessageID</Value>
</Value>
<Value name="3">
<Value>Information</Value>
</Value>
<Value name="4">
<Value>HumanfaceID</Value>
</Value>
<Value name="5">
<Value>Conversation</Value>
</Value>
<Value name="6">
<Value>ReplyTo</Value>
</Value>
<Value name="7">
<Value>CreatedAt</Value>
</Value>
<Value name="8">
<Value>Important</Value>
</Value>
<Value name="9">
<Value>Attachment</Value>
</Value>
<Value name="10">
<Value>CountOfAttachment</Value>
</Value>
<Value name="11">
<Value>CountOfAttachments</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1.82</AverageFieldSize>
</Property>
<Property name="Conversation">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="ConversationID">
<Selectivity>0.0947%</Selectivity>
<OutlierSelectivity>.992784:1</OutlierSelectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="CreatedAt">
<Selectivity>2.0000%</Selectivity>
<AverageFieldSize>19</AverageFieldSize>
</Property>
<Property name="HumanfaceID">
<Selectivity>2.0000%</Selectivity>
<AverageFieldSize>8.88</AverageFieldSize>
</Property>
<Property name="Important">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="Information">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
</Property>
<Property name="MessageID">
<Selectivity>1</Selectivity>
<AverageFieldSize>9</AverageFieldSize>
</Property>
<Property name="ReplyTo">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<SQLMap name="ConversationIDIndex">
<BlockCount>-8</BlockCount>
</SQLMap>
<SQLMap name="ConversationIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="MessageIDIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="Data.UserConversation">
<Super>%Persistent,%Populate</Super>
<TimeChanged>64603,48479.777546</TimeChanged>
<TimeCreated>64554,37077.490562</TimeCreated>

<Property name="HumanfaceID">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="Conversation">
<Type>Data.Conversation</Type>
<Required>1</Required>
</Property>

<Index name="ConversationIndex">
<Properties>Conversation</Properties>
</Index>

<Property name="FirstMessage">
<Type>Data.Message</Type>
<Required>1</Required>
</Property>

<Property name="LastMessage">
<Type>Data.Message</Type>
<Required>1</Required>
</Property>

<Property name="LastDecanatMessage">
<Type>Data.Message</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Data.UserConversationD</DataLocation>
<DefaultData>UserConversationDefaultData</DefaultData>
<IdLocation>^Data.UserConversationD</IdLocation>
<IndexLocation>^Data.UserConversationI</IndexLocation>
<StreamLocation>^Data.UserConversationS</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="UserConversationDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>HumanfaceID</Value>
</Value>
<Value name="3">
<Value>GroupName</Value>
</Value>
<Value name="4">
<Value>Conversation</Value>
</Value>
<Value name="5">
<Value>DateLastMessage</Value>
</Value>
<Value name="6">
<Value>DateFirstMessage</Value>
</Value>
<Value name="7">
<Value>FirstMessageID</Value>
</Value>
<Value name="8">
<Value>LastMessageID</Value>
</Value>
<Value name="9">
<Value>FirstMessage</Value>
</Value>
<Value name="10">
<Value>LastMessage</Value>
</Value>
<Value name="11">
<Value>Family</Value>
</Value>
<Value name="12">
<Value>Name</Value>
</Value>
<Value name="13">
<Value>Patronymic</Value>
</Value>
<Value name="14">
<Value>LastDecanatMessage</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1.1</AverageFieldSize>
</Property>
<Property name="Conversation">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="ConversationID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="DateFirstMessage">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>19</AverageFieldSize>
</Property>
<Property name="DateLastMessage">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>19</AverageFieldSize>
</Property>
<Property name="HumanfaceID">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>9</AverageFieldSize>
</Property>
<SQLMap name="ConversationIDIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="ConversationIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Routine name="REST" type="INC" timestamp="64566,48400.509836"><![CDATA[
#include %occErrors
#include %ZEN.Utils
#define get(%name) $get(%request.Data(%name,1))
#define Debug $d(%request.Data("Debug"))
#define R(%property) %request.Content.##Expression(%property)
#define Public ((%request.GetCgiEnv("SERVER_PORT") = 80) || (%request.GetCgiEnv("SERVER_PORT") = 443))
#define Private '$$$Public
]]></Routine>


<Class name="Web.AbstractREST">
<IncludeCode>REST</IncludeCode>
<Super>%CSP.REST</Super>
<TimeChanged>64566,48409.241731</TimeChanged>
<TimeCreated>64566,48409.241731</TimeCreated>

<Parameter name="UseSession">
<Type>Integer</Type>
<Default>1</Default>
</Parameter>

<Method name="DispatchRequest">
<Description><![CDATA[
Dispatch a REST request according to URL and Method.<br>
Add param Namespace to a request to execute MDX in desired namespace.]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUrl:%String,pMethod:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim %response As %CSP.Response
	#dim %request As %CSP.Request
	#dim %session As %CSP.Session
	
	//Do %response.SetHeader("Access-Control-Allow-Origin",..GetOrigins())
	Do %response.SetHeader("Access-Control-Allow-Origin","*")
	Do %response.SetHeader("Access-Control-Allow-Credentials","true")
	Do %response.SetHeader("Access-Control-Allow-Methods","GET, PUT, POST, DELETE, OPTIONS")
	Do %response.SetHeader("Access-Control-Max-Age","10000")
	Do %response.SetHeader("Access-Control-Allow-Headers","Content-Type, Authorization, Accept-Language, X-Requested-With") 
	
	Set %response.CharSet = "utf-8"
	Set %response.ContentType="application/json"

	Set %session.Language=$$MatchLanguage^%occMessages(%request.GetCgiEnv("HTTP_ACCEPT_LANGUAGE"),"%CSP","+s") // Localization support
	Set %response.Language=%session.Language
    
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tMatcher As %Regex.Matcher
    
    #dim tArgs,tClass,tMatchUrl,tMapEntry,tRegEx,tTarget,tAccess As %String
    #dim tI,tIndex As %Integer
    #dim tResourceMatched As %Boolean
    #dim tMethodMatched As %Boolean
    
    Try {
	    
	    Set st = ..ConvertRequestBody()
	    If $$$ISERR(st) Do ..Http500(st) Quit
	    
	    // Desired execusion namespace
	    Set Namespace = $get(%request.Data("Namespace",1))
	    Set st = ..CheckNamespace(.Namespace)
	    If $$$ISERR(st) Do ..Http500(st) Quit
	    
        #; Check that the effective user ( could be unknown user ) can access this resource
        Set tAccess=$SYSTEM.Security.Check($Piece($zu(90,21,$namespace),"^",4))
        Set tAccess2=$SYSTEM.Security.Check($Piece($zu(90,21,Namespace),"^",4))
        If ((tAccess'["READ,WRITE") || (tAccess2'["READ,WRITE"))
        {
            #; Don't want the session token
            Set %response.OutputSessionToken=0
            
            #; Set the Http Status
            Set %response.Status="401 Unauthorized"
        
            #; Write out the header
            Do %response.WriteHTTPHeader()
            
            #; Done
            Quit
        }
        
        Set (tResourceMatched,tMethodMatched)=0
        
        #; Walk the dispatch map in collation order of defintion
        For tIndex=1:1 {
            
            #; Get the next map entry
            Set tMapEntry=..DispatchMap(tIndex) If tMapEntry="" Quit

            #; Pick out the RegEx
            Set tRegEx=$List(tMapEntry,1)
            
            #; Create a matcher
            Set tMatcher=##class(%Regex.Matcher).%New(tRegEx)
        
            #; Extract the match url from the application name
            Set tMatchUrl="/"_$Extract(pUrl,$Length(%request.Application)+1,*)
            
            #; Test each regular expression in turn, extracting the arguments,
            #; dispatching to the named method  
            If tMatcher.Match(tMatchUrl) {
                
                #; We have matched the resource
                Set tResourceMatched=1
                
                #; Now check method name
                If pMethod'=$List(tMapEntry,2) Continue
                
                Set tTarget=$List(tMapEntry,3)
                
                #; We have matched a method
                Set tMethodMatched=1
                
                #; Got a match, marshall the arguments
                If tMatcher.GroupCount {
                    For tI=1:1:tMatcher.GroupCount Set tArgs(tI)=tMatcher.Group(tI)
                    Set tArgs=tI
                } else {
                    Set tArgs=0
                }
                
                #; Check for optional ClassName prefix
                Set tClass=$classname()
                If tTarget[":" Set tClass=$Piece(tTarget,":"),tTarget=$Piece(tTarget,":",2)
                
                #; Validate input
                Set tBody = $List(tMapEntry,4) 
                Set tSC = ..ValidateRequest(pMethod,tBody)
                If $$$ISERR(tSC) Do ..Http500(tSC) Quit
                
                #; Dispatch                
                If (Namespace'=$Namespace) {
                    Set oldNS = $Namespace
                    zn Namespace
                    Set tSC=$classmethod(tClass,tTarget,tArgs...)
                    zn oldNS
                } Else {
                    Set tSC=$classmethod(tClass,tTarget,tArgs...)
                }
                If $$$ISERR(tSC) Do ..Http500(tSC)
                
                #; Don't want multiple matches
                Quit
            }
        }
        
        #; Didn't have a match for the resource, report not found
        If tResourceMatched=0 Set tSC=..Http404() Quit
        
        #; Had a match for resource but method not matched
        If tMethodMatched=0 Set tSC=..Http405() Quit
            
    } Catch (ex) {
        
        #; Issue a '500'
        Do ..Http500(ex.AsStatus())
    }
    
    If ..#UseSession=0 Set %session.EndSession=1
    
    Quit tSC
]]></Implementation>
</Method>

<Method name="ValidateRequest">
<Description>
Validates incoming request body against Body Route attribute.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMethod:%String,pBody:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim %request As %CSP.Request
	
	return:(pMethod'="POST") $$$OK
	return:(pBody="") $$$OK
	return:'$d(%request.Content.%data(pBody)) $$$ERROR($$$PropertyRequired,pBody)
	return $$$OK
]]></Implementation>
</Method>

<Method name="ConvertRequestBody">
<Description>
Converts request into UTF8. Converts request into proxyObject. </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim %request As %CSP.Request
	#dim obj As %ZEN.proxyObject

	return:'$isobject(%request.Content) $$$OK //empty request body - nothing to do
	
	// Convert request body into UTF8 proxyObject
	set content = %request.Content.Read($$$MaxStringLength)
	set content = $ZCVT(content,"I","UTF8") 
	set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(content,,.obj,1)
	return:$$$ISERR(st) st
	return:'$IsObject(obj) $$$ERROR($$$ArgumentIsNotAnObject,"Body")
	
	set %request.Content = obj // obj here is a valid UTF8 proxyObject with required property
	return $$$OK
]]></Implementation>
</Method>

<Method name="GetOrigins">
<Description>
Get Origin from %request object </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set url = %request.GetCgiEnv("HTTP_REFERER")
	return $p(url,"/",1,3) // get http(s)://origin.com:port
]]></Implementation>
</Method>

<Method name="Login">
<Description>
Called for a REST page in the event of a login being required</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>skipheader:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//Do %response.SetHeader("Access-Control-Allow-Origin",..GetOrigins())
	Do %response.SetHeader("Access-Control-Allow-Origin","*")
	Do %response.SetHeader("Access-Control-Allow-Credentials","true")
	Do %response.SetHeader("Access-Control-Allow-Methods","GET, PUT, POST, DELETE, OPTIONS")
	Do %response.SetHeader("Access-Control-Max-Age","10000")
	Do %response.SetHeader("Access-Control-Allow-Headers","Content-Type, Authorization, Accept-Language, X-Requested-With")
	
	Set %response.CharSet = "utf-8"
	Set %response.ContentType="application/json"
	
	If (%request.GetCgiEnv("REQUEST_METHOD") = "OPTIONS"){
		Do %response.WriteHTTPHeader()
		Return $$$OK
	}
	
    Quit ##super(skipheader)
]]></Implementation>
</Method>

<Method name="Http500">
<Description><![CDATA[
Issue an '500' error and give some indication as to what occurred.<br>
<b>pStatus</b> - %status, not %Exception.AbstractException.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStatus:%Exception.AbstractException</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // we are expecting status
    #; Set the response Http status
    Set %response.Status="500 Internal Server Error"
    
    #; Return a helpful error string
    Write "{""Error oops"":"_$$$ZENJSSTR($System.Status.GetErrorText(pStatus,%session.Language))_"}"
    
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="CheckNamespace">
<Description><![CDATA[
Returns OK if namespace both exists and contains MDX2JSON package.<br>
<b>Namespace</b> - name of namespace. Sets namespace variable to current namespace if empty or missing.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&Namespace:%String=$Namespace]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (Namespace = "") {
		set Namespace = $Namespace
		return $$$OK
	}
	
	return:('##class(%SYS.Namespace).Exists(Namespace)) $$$ERROR($$$NamespaceUnavailable,Namespace) 
	
	if Namespace'=$Namespace {
        set oldNS = $Namespace
        zn Namespace
        set exists = ##class(%Dictionary.CompiledClass).%ExistsId("MDX2JSON.Utils") 
        zn oldNS
        return:(exists=0) $$$ERROR($$$GeneralError, "MDX2JSON package is not mapped to " _ Namespace)		
	}
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="DispatchMap">
<Description>
This project creates the DispatchMethod used to dispatch the Url and Method to the associated target method</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>pIndex:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tStream As %Stream.TmpCharacter
    #dim tHandler As %XML.ImportHandler
    #dim tCompiledClass As %Dictionary.CompiledClass
    
    #dim tArgCount,tIndex,tI,tCounter As %Integer
    #dim tArgs,tChild,tClassName,tDispatch,tError,tMap,tMethod,tPattern,tPiece,tType,tUrl As %String
    
    Try {
        
        Set tClassName=%classname
        
        #; Don't run on base class
        If tClassName="MDX2JSON.AbstractREST" Quit
       
        #; Find named XDATA block
        If ##class(%Dictionary.CompiledXData).%ExistsId(tClassName_"||UrlMap") {
            
            Set tCompiledClass=##class(%Dictionary.CompiledClass).%OpenId(tClassName,,.tSC)
            If '$IsObject(tCompiledClass)||$$$ISERR(tSC) Quit
            
            Set tIndex = tCompiledClass.XDatas.FindObjectId(tClassName_"||UrlMap")
            If tIndex="" Set tSC=$$$ERROR($$$XDataBlockMissing,tClassName,"UrlMap") Quit
        
            #; Get XDATA as stream
            Set tStream = tCompiledClass.XDatas.GetAt(tIndex).Data
            Do tStream.Rewind()
            
            #; Create an XML import handler ( use the internal handler )
            Set tHandler=##class(%XML.ImportHandler).%New("CacheTemp",$$$IntHandler) 
        
            #; Create the Entity Resolver
            Set tResolver=##class(%XML.SAX.XDataEntityResolver).%New(tClassName)
        
            #; Parse the XML data in the specfied stream
            Set tSC=##Class(%XML.SAX.Parser).ParseStream(tStream,tHandler,tResolver,,,"Schema")
            If $$$ISERR(tSC) Quit       
        
            #; Copy tree because handler will delete it's copy when it goes out of scope
            Merge tMap=^CacheTemp(tHandler.Tree)
    
            If $Data(tMap("error"))||$Data(tMap("warning")) {
                
                Set tSC=$$$ERROR($$$InvalidDispatchMap)
                For tType="error","warning" {       
                    Set tIndex = "" For {
                        Set tIndex=$Order(tMap(tType,tIndex),1,tError) If tIndex="" Quit
                        Set tSC=$$$ADDSC(tSC,$$$ERROR($$$GeneralError,tError))
                    }
                }
                Quit
            }
            
            #; Walk the xml and generate the routing map
            Set tChild="",tCounter=0 For {
                Set tChild=$Order(tMap(1,"c",tChild)) If tChild="" Quit
                Set tPattern="",tArgCount=0,tUrl=tMap(tChild,"a","Url")
                For tI=2:1:$Length(tUrl,"/") {
                    Set tPiece=$Piece(tUrl,"/",tI)
                    If $Extract(tPiece)=":" {
                        Set tPattern=tPattern_"/([^/]+)"
                    } else {
                        Set tPattern=tPattern_"/"_tPiece
                    }
                }
               
                Set tCounter=$Increment(tCounter),tMethod=tMap(tChild,"a","Method"),tDispatch=tMap(tChild,"a","Call"),tBody=$g(tMap(tChild,"a","Body"))
                $$$GENERATE(" If pIndex="_tCounter_" Quit $ListBuild("""_tPattern_""","""_tMethod_""","""_tDispatch_""","""_tBody_""")")
            }
            $$$GENERATE(" Quit """"")
                
        } Else {
            
            #; The specified class must have an XDATA Block named UrlMap
            Set tSC=$$$ERROR($$$XDataBlockMissing,tClassName,"UrlMap")
        }
        
    } Catch (e) {
        Set tSC=e.AsStatus()
    }
    
    Quit tSC
]]></Implementation>
</Method>

<XData name="Schema">
<Description>
This is the Schema which defines the form of the dispatch map</Description>
<Internal>1</Internal>
<Data><![CDATA[
<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" >

<xs:element name="Routes">
<xs:complexType>
<xs:sequence>
<xs:element name="Route" minOccurs="0" maxOccurs="unbounded">
<xs:complexType>
<xs:attribute name="Url"    type="string" use="required"/>
<xs:attribute name="Method" type="string" use="required"/>
<xs:attribute name="Call" type="call" use="required"/>
<xs:attribute name="Body" type="string" use="optional"/>
</xs:complexType>
</xs:element>
</xs:sequence>
</xs:complexType>
</xs:element>

<xs:simpleType name="call">
<xs:restriction base="xs:string">
<xs:pattern value="([%]?[a-zA-Z][a-zA-Z0-9]*(\.[a-zA-Z][a-zA-Z0-9]*)*:)?[%]?[a-zA-Z][a-zA-Z0-9]*"/>
</xs:restriction>
</xs:simpleType>

<xs:simpleType name="string">
<xs:restriction base="xs:string">
<xs:minLength value="1"/>
</xs:restriction>
</xs:simpleType>


</xs:schema>
]]></Data>
</XData>

<Method name="POtoStr">
<ClassMethod>1</ClassMethod>
<FormalSpec>config</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set str=""
		
	//Redirect IO to the current routine - makes use of the labels defined below
	use $io::("^"_$ZNAME)
	
	//Enable redirection
	do ##class(%Device).ReDirectIO(1)

	do config.%ToJSON()
	
    //Disable redirection
    do ##class(%Device).ReDirectIO(0)
    
    quit str	  

    //Labels that allow for IO redirection
    //Read Character - we don't care about reading
rchr(c)      quit
    //Read a string - we don't care about reading
rstr(sz,to)  quit
    //Write a character - call the output label
wchr(s)      do output($char(s))  quit
    //Write a form feed - call the output label
wff()        do output($char(12))  quit
    //Write a newline - call the output label
wnl()        do output($char(13,10))  quit
    //Write a string - call the output label
wstr(s)      do output(s)  quit
    //Write a tab - call the output label
wtab(s)      do output($char(9))  quit
    //Output label - this is where you would handle what you actually want to do.
    //  in our case, we want to write to myStream
output(s)    set str=str_s   quit
]]></Implementation>
</Method>
</Class>


<Class name="Web.Broker">
<Super>Web.AbstractREST</Super>
<TimeChanged>64605,79031.727444</TimeChanged>
<TimeCreated>64564,59337.673731</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
<Route Url="/test" Method="GET" Call="Web.Utils:Test"/>

<!-- Запрос №0
     Получить ИД UserConversation для данного человека в данной группе  -->
<Route Url="/conversations" Method="POST" Call="Web.Utils:CreateOrGetConversation"/>

<!-- Запрос №1
     Получить все непрочитанные сообщения в конкретном диалоге -->
<Route Url="/conversations/:userConv" Method="GET" Call="Web.Utils:GetUnreadMessages"/>

<!-- Запрос №2
     Подгрузить вниз
	 userConv - ID userConversation 
	 idmess - ИД нижнего прочитанного сообщения -->
<Route Url="/messages/new/:userConv/:idmess" Method="GET" Call="Web.Utils:GetNewMessages"/>

<!-- Запрос №3
     Получить 20 сообщений в конкретном диалоге (вверх)
	 userConv - ID userConversation 
	 idmess - ИД верхнего прочитанного сообщения -->
<Route Url="/messages/old/:userConv/:idmess" Method="GET" Call="Web.Utils:GetHistoryMessages"/>

<!-- Запрос №4
     Получить список важных сообщений
	 userConv - ID userConversation   -->
<Route Url="/important/:userConv" Method="GET" Call="Web.Utils:GetListOfImportantMessages"/>

<!-- Запрос №5
     Пометить как важное
	 idmess - ИД сообщения
	 status - 1 или 0 -->
<Route Url="/important/:idmess/:status" Method="POST" Call="Web.Utils:MarkAsImportant"/>

<!-- Запрос №6
     Создать сообщение -->
<Route Url="/message" Method="POST" Call="Web.Utils:PostNewMessage"/>

<!-- Запрос №7
     Изменить последнее прочитанное сообщение
	 userConv - ID userConversation 
	 idmess - ИД сообщения -->
<Route Url="/message/:userConv/:idmess" Method="POST" Call="Web.Utils:UpdateLastMessage"/>

<!-- Запрос №8 - 
     Поиск сообщения -->
<Route Url="/message/find" Method="GET" Call="Web.Utils:FindMessage"/>


<Route Url="/dec/incoming" Method="GET" Call="Web.Utils:GetIncomingDecanatMessages"/>

</Routes>
]]></Data>
</XData>
</Class>


<Class name="Web.Utils">
<Super>Web.AbstractREST</Super>
<TimeChanged>64609,51105.139347</TimeChanged>
<TimeCreated>64587,50721.750363</TimeCreated>

<Method name="CreateOrGetConversation">
<Description>
Получить ID UserConversation конкретного диалога</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s obj = %request.Content
	s idhum = obj.HumanfaceID
    s group = obj.GroupName
	
	s rs = ..GetConversation(idhum, group)
	
	s conversation = ""
	s userConv = ""
	
	while (rs.%Next() '= 0) { 
		if (rs.Data("convID") = "")
		{
			s conversation = ..CreateConversation(group)
			s message = ..CreateMessage("Диалог создан", -1, conversation, 0, , , 0)			
			s userMessage = ..CreateMessage(idhum, -2, conversation, 0, , , 0)
			s userConv = ..CreateUserConversation(conversation, idhum, 
											      message, message, message)
		}
		if (rs.Data("userConvID") = "")
		{
			s conversation = ##class(Data.Conversation).%OpenId(rs.Data("convID"))
			s message = ..CreateMessage(idhum, -2, conversation, 0,,,0)
			s userConv = ..CreateUserConversation(conversation, idhum,
											      message, message, message)
		}
		else
		{
			s conversation = ##class(Data.Conversation).%OpenId(rs.Data("convID"))
			s userConv = ##class(Data.UserConversation).%OpenId(rs.Data("userConvID"))
		}
	}
	
	if (conversation = "")
	{	
		s conversation = ..CreateConversation(group)
		s message = ..CreateMessage("Диалог создан", -1, conversation, 0,,,0)		
		s userMessage = ..CreateMessage(idhum, -2, conversation, 0,)
		s userConv = ..CreateUserConversation(conversation, idhum, 
											  message, message, message)
	}	
	
	s r = {}
	s r.ucID = userConv.%Id()
	w r.%ToJSON()
		
	return $$$OK
]]></Implementation>
</Method>

<Method name="GetUnreadMessages">
<Description>
Получить непрочитанные сообщения</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>userConv</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s uc = ##class(Data.UserConversation).%OpenId(userConv)
	s sql = "SELECT * " _
	"FROM Data.Message WHERE Conversation = " _ uc.Conversation.%Id() _ 
	" AND ID > '" _ uc.LastMessage.%Id() _ "' ORDER BY CreatedAt, ID"
	
	d ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql,,$$$MaxCacheInt)
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="GetHistoryMessages">
<Description>
Получить историю сообщений (20 вверх)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>userConv,idmess</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s uc = ##class(Data.UserConversation).%OpenId(userConv)
	s sql = "SELECT TOP 20 * FROM Data.Message WHERE Conversation = " _ uc.Conversation.%Id() _
	" AND ID >= '" _ uc.FirstMessage.%Id() _ 
	"' AND ID < " _ idmess _ " ORDER BY CreatedAt"
		
	d ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql,,$$$MaxCacheInt)
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="GetNewMessages">
<Description>
Получить новые сообщения (20 вниз)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>userConv,idmess</FormalSpec>
<Implementation><![CDATA[
	s uc = ##class(Data.UserConversation).%OpenId(userConv)
	s sql = "SELECT TOP 20 * FROM Data.Message WHERE Conversation = " _ uc.Conversation.%Id() _
	" AND ID >= '" _ uc.FirstMessage.%Id() _ 
	"' AND ID > " _ idmess _ " ORDER BY CreatedAt"
		
	d ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql,,$$$MaxCacheInt)
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="FindMessage">
<Description>
Найти сообщение</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s userConv = %request.Data("userConv",1)
	
	s conv = ##class(Data.UserConversation).%OpenId(userConv)
	s conv = conv.Conversation.%Id()
	
	s str = %request.Data("str",1)
		
	s sql = "SELECT * FROM Data.Message WHERE Conversation = " _ conv _ 
	" AND Information LIKE '%" _ str _"%'" _
	" ORDER BY CreatedAt"
	
	d ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql,,$$$MaxCacheInt)
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="PostNewMessage">
<Description>
Написать сообщение, не дописано для деканата</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s st = $$$OK
    try {
	    s obj = %request.Content
	    
	    if (obj.HumanfaceID = -3)
	    {
		    s humanfaces = obj.Humanfaces
		    
		    s group = ""
		    
		    for i=1:1:humanfaces.Count()
		    {			    
		    	s conversation = ""
		    	
			    s idhum = humanfaces.GetAt(i)
			    
			    s rs = ..GetDecConversation(idhum)
			    while (rs.%Next() '= 0) { 
					if (rs.Data("convID") = "")
					{
						s conversation = ..CreateConversation(group)
						s message = ..CreateMessage("Диалог создан", -1, conversation, 0, , , 0)			
						s userMessage = ..CreateMessage(idhum, -2, conversation, 0, , , 0)
						s userConv = ..CreateUserConversation(conversation, idhum, 
														      message, message, message)
					}
					if (rs.Data("userConvID") = "")
					{
						s conversation = ##class(Data.Conversation).%OpenId(rs.Data("convID"))
						s message = ..CreateMessage(idhum, -2, conversation, 0,,,0)
						s userConv = ..CreateUserConversation(conversation, idhum,
												      message, message, message)
					}
					else
					{
						s conversation = ##class(Data.Conversation).%OpenId(rs.Data("convID"))
						s userConv = ##class(Data.UserConversation).%OpenId(rs.Data("userConvID"))
					}
				}
				if (conversation = "")
			{	
				s conversation = ..CreateConversation(group)
				s message = ..CreateMessage("Диалог создан", -1, conversation, 0,,,0)		
				s userMessage = ..CreateMessage(idhum, -2, conversation, 0,)
				s userConv = ..CreateUserConversation(conversation, idhum, 
													  message, message, message)
			}	
	
				s mess = ..CreateMessage(obj.Information, obj.HumanfaceID, conversation,0, , obj.Attachment, obj.CountOfAttachments)		    
		    	
			   	s r = {"Status":"1"}
		    }
		    
		    
		}
	    else
	    {	    
	    	s userConv = ##class(Data.UserConversation).%OpenId(obj.UserConversation)
	    	if (obj.HumanfaceID = userConv.HumanfaceID)
	    	{	
    			s mess = ..CreateMessage(obj.Information, obj.HumanfaceID, userConv.Conversation, 
    									 obj.Important, obj.ReplyTo, obj.Attachment, obj.CountOfAttachments)
    			
    	
    			s r = {"Status":"1"}
	    	}
	    	else
	    	{
		    	s r = {"Status":"-1"}
	    	}   
	    }	
    	w r.%ToJSON()
    
    	
    } 
    catch ex {
        s st = ex.AsStatus()
    }
    quit st
]]></Implementation>
</Method>

<Method name="GetListOfImportantMessages">
<Description>
Получить список важных сообщений для группы</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>userConv</FormalSpec>
<Implementation><![CDATA[
	s st = $$$OK
	try {
		s conv = ##class(Data.UserConversation).%OpenId(userConv)
		s conv = conv.Conversation
		
		s sql = "SELECT ID, Information, HumanfaceID, CreatedAt " _
		"FROM Data.Message " _
		"WHERE Important = 1 AND Conversation = " _ conv.%Id()
	
		d ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql,,$$$MaxCacheInt)
	}
	catch ex {
		s st = ex.AsStatus()
	}
	quit st
]]></Implementation>
</Method>

<Method name="MarkAsImportant">
<Description>
Пометить как важное</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>idmess,status</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s st = $$$OK
	try {
		s mess = ##class(Data.Message).%OpenId(idmess)
		s mess.Important = status
		$$$ThrowOnError(mess.%Save())
	
		s r = {"Status":"1"}
    	w r.%ToJSON()
	}
	catch ex {
		s st = ex.AsStatus()
	}
	quit st
]]></Implementation>
</Method>

<Method name="UpdateLastMessage">
<Description>
Обновить статус последнего прочитанного сообщения</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>userConv,idmess</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s st = $$$OK
	try {
		s uc = ##class(Data.UserConversation).%OpenId(userConv)
		s uc.LastMessage = ##class(Data.Message).%OpenId(idmess)
		$$$ThrowOnError(uc.%Save())
	
		s r = {"Status":"1"}
    	w r.%ToJSON()
	}
	catch ex {
		s st = ex.AsStatus()
	}
	quit st
]]></Implementation>
</Method>

<Method name="GetIncomingDecanatMessages">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	
	s sql = "SELECT uc.ID AS ""UserConversation"", uc.HumanfaceID, COUNT(m.ID) As ""Count"" " _
	" FROM Data.Message AS m " _
	" INNER JOIN Data.Conversation AS c ON c.ID = m.Conversation " _
	" INNER JOIN Data.UserConversation AS uc ON uc.Conversation = c.ID " _
	" WHERE c.Title IS NULL AND m.HumanfaceID NOT IN (-1,-2) " _
	" GROUP BY m.Conversation"
	
	d ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql,,$$$MaxCacheInt)
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="CreateMessage">
<Description>
Создать сообщение</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>information:%String,idhum:%Integer,conversation:Data.Conversation,important:%Boolean,replyTo:Data.Message="",attachment:%String="",attachCount:%Integer=0</FormalSpec>
<ReturnType>Data.Message</ReturnType>
<Implementation><![CDATA[
	s message = ##class(Data.Message).%New()
	
	s message.Information = information
	s message.HumanfaceID = idhum
	s message.Conversation = conversation
	s message.Important = important
	if (replyTo '= "")
		s message.ReplyTo = ##class(Data.Message).%OpenId(replyTo)
	s message.CreatedAt = $zdt($ztimestamp,3)
	s message.Attachment = attachment
	s message.CountOfAttachments = attachCount
	
	$$$ThrowOnError(message.%Save())
	
	return message
]]></Implementation>
</Method>

<Method name="CreateConversation">
<Description>
Создать диалог</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>group:%String</FormalSpec>
<ReturnType>Data.Conversation</ReturnType>
<Implementation><![CDATA[
	s conversation = ##class(Data.Conversation).%New()
	s conversation.Title = group
	s conversation.CreatedAt = $zdt($ztimestamp,3)
	$$$ThrowOnError(conversation.%Save())
	
	return conversation
]]></Implementation>
</Method>

<Method name="CreateUserConversation">
<Description>
Создать диалог для пользователя</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>conversation:Data.Conversation,idhum:%Integer,firstMessage:Data.Message,lastMessage:Data.Message,lastDecMessage:Data.Message</FormalSpec>
<ReturnType>Data.UserConversation</ReturnType>
<Implementation><![CDATA[
	s userConversation = ##class(Data.UserConversation).%New()
	
	s userConversation.HumanfaceID = idhum
	s userConversation.Conversation = conversation
	s userConversation.FirstMessage = firstMessage
	s userConversation.LastMessage = lastMessage
	s userConversation.LastDecanatMessage = lastDecMessage
		
	$$$ThrowOnError(userConversation.%Save())
	
	return userConversation
]]></Implementation>
</Method>

<Method name="GetConversation">
<Description>
Получить ИД диалога с определенным названием для определенного пользователя</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>idhum,group</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	s sql = "SELECT dc.ID AS convID, uc.ID AS userConvID " _
	"FROM Data.Conversation AS dc LEFT JOIN Data.UserConversation AS uc " _
	"ON dc.ID = uc.Conversation AND HumanfaceID = ? WHERE dc.Title = ?"
	
	s rs = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	$$$ThrowOnError(rs.Prepare(sql))
	$$$ThrowOnError(rs.Execute(idhum, group))
	
	return rs
]]></Implementation>
</Method>

<Method name="GetDecConversation">
<ClassMethod>1</ClassMethod>
<FormalSpec>idhum</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	s sql = "SELECT dc.ID AS convID, uc.ID AS userConvID " _
	"FROM Data.Conversation AS dc LEFT JOIN Data.UserConversation AS uc " _
	"ON dc.ID = uc.Conversation WHERE dc.Title IS NULL AND HumanfaceID = ?"
	
	s rs = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	$$$ThrowOnError(rs.Prepare(sql))
	$$$ThrowOnError(rs.Execute(idhum))
	
	return rs
]]></Implementation>
</Method>

<Method name="Test">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	w "Test"
	return $$$OK
]]></Implementation>
</Method>
</Class>


<Project name="isit" LastModified="2017-11-21 18:32:19.748845">
  <Items>
    <ProjectItem name="Data.Conversation" type="CLS"></ProjectItem>
    <ProjectItem name="Data.Message" type="CLS"></ProjectItem>
    <ProjectItem name="Data.UserConversation" type="CLS"></ProjectItem>
    <ProjectItem name="REST.INC" type="MAC"></ProjectItem>
    <ProjectItem name="Web.AbstractREST" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Broker" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Utils" type="CLS"></ProjectItem>
  </Items>
</Project>
</Export>
